// auto-generated by x2clr xpiler

using System;
using System.Collections.Generic;
using System.Text;

using x2;

namespace Events.Database
{
    public class EventCreateOrLoadUserReq : Event
    {
        new protected static readonly Tag tag;

        new public static int TypeId { get { return tag.TypeId; } }

        private string account_;
        private string password_;
        private string nick_;
        private string deviceId_;
        private int context_;

        public string Account
        {
            get { return account_; }
            set
            {
                fingerprint.Touch(tag.Offset + 0);
                account_ = value;
            }
        }

        public string Password
        {
            get { return password_; }
            set
            {
                fingerprint.Touch(tag.Offset + 1);
                password_ = value;
            }
        }

        public string Nick
        {
            get { return nick_; }
            set
            {
                fingerprint.Touch(tag.Offset + 2);
                nick_ = value;
            }
        }

        public string DeviceId
        {
            get { return deviceId_; }
            set
            {
                fingerprint.Touch(tag.Offset + 3);
                deviceId_ = value;
            }
        }

        public int Context
        {
            get { return context_; }
            set
            {
                fingerprint.Touch(tag.Offset + 4);
                context_ = value;
            }
        }

        static EventCreateOrLoadUserReq()
        {
            tag = new Tag(Event.tag, typeof(EventCreateOrLoadUserReq), 5,
                    (int)EventDatabaseTypes.CreateOrLoadUserReq);
        }

        public new static EventCreateOrLoadUserReq New()
        {
            return new EventCreateOrLoadUserReq();
        }

        public EventCreateOrLoadUserReq()
            : base(tag.NumProps)
        {
            Initialize();
        }

        protected EventCreateOrLoadUserReq(int length)
            : base(length + tag.NumProps)
        {
            Initialize();
        }

        protected override bool EqualsTo(Cell other)
        {
            if (!base.EqualsTo(other))
            {
                return false;
            }
            EventCreateOrLoadUserReq o = (EventCreateOrLoadUserReq)other;
            if (account_ != o.account_)
            {
                return false;
            }
            if (password_ != o.password_)
            {
                return false;
            }
            if (nick_ != o.nick_)
            {
                return false;
            }
            if (deviceId_ != o.deviceId_)
            {
                return false;
            }
            if (context_ != o.context_)
            {
                return false;
            }
            return true;
        }

        public override int GetHashCode(Fingerprint fingerprint)
        {
            var hash = new Hash(base.GetHashCode(fingerprint));
            if (fingerprint.Length <= tag.Offset)
            {
                return hash.Code;
            }
            var touched = new Capo<bool>(fingerprint, tag.Offset);
            if (touched[0])
            {
                hash.Update(tag.Offset + 0);
                hash.Update(account_);
            }
            if (touched[1])
            {
                hash.Update(tag.Offset + 1);
                hash.Update(password_);
            }
            if (touched[2])
            {
                hash.Update(tag.Offset + 2);
                hash.Update(nick_);
            }
            if (touched[3])
            {
                hash.Update(tag.Offset + 3);
                hash.Update(deviceId_);
            }
            if (touched[4])
            {
                hash.Update(tag.Offset + 4);
                hash.Update(context_);
            }
            return hash.Code;
        }

        public override int GetTypeId()
        {
            return tag.TypeId;
        }

        public override Cell.Tag GetTypeTag() 
        {
            return tag;
        }

        public override Func<Event> GetFactoryMethod()
        {
            return EventCreateOrLoadUserReq.New;
        }

        protected override bool IsEquivalent(Cell other, Fingerprint fingerprint)
        {
            if (!base.IsEquivalent(other, fingerprint))
            {
                return false;
            }
            EventCreateOrLoadUserReq o = (EventCreateOrLoadUserReq)other;
            var touched = new Capo<bool>(fingerprint, tag.Offset);
            if (touched[0])
            {
                if (account_ != o.account_)
                {
                    return false;
                }
            }
            if (touched[1])
            {
                if (password_ != o.password_)
                {
                    return false;
                }
            }
            if (touched[2])
            {
                if (nick_ != o.nick_)
                {
                    return false;
                }
            }
            if (touched[3])
            {
                if (deviceId_ != o.deviceId_)
                {
                    return false;
                }
            }
            if (touched[4])
            {
                if (context_ != o.context_)
                {
                    return false;
                }
            }
            return true;
        }

        public override void Deserialize(Deserializer deserializer)
        {
            base.Deserialize(deserializer);
            var touched = new Capo<bool>(fingerprint, tag.Offset);
            if (touched[0])
            {
                deserializer.Read(out account_);
            }
            if (touched[1])
            {
                deserializer.Read(out password_);
            }
            if (touched[2])
            {
                deserializer.Read(out nick_);
            }
            if (touched[3])
            {
                deserializer.Read(out deviceId_);
            }
            if (touched[4])
            {
                deserializer.Read(out context_);
            }
        }

        public override void Deserialize(VerboseDeserializer deserializer)
        {
            base.Deserialize(deserializer);
            deserializer.Read("Account", out account_);
            deserializer.Read("Password", out password_);
            deserializer.Read("Nick", out nick_);
            deserializer.Read("DeviceId", out deviceId_);
            deserializer.Read("Context", out context_);
        }

        public override void Serialize(Serializer serializer)
        {
            base.Serialize(serializer);
            var touched = new Capo<bool>(fingerprint, tag.Offset);
            if (touched[0])
            {
                serializer.Write(account_);
            }
            if (touched[1])
            {
                serializer.Write(password_);
            }
            if (touched[2])
            {
                serializer.Write(nick_);
            }
            if (touched[3])
            {
                serializer.Write(deviceId_);
            }
            if (touched[4])
            {
                serializer.Write(context_);
            }
        }

        public override void Serialize(VerboseSerializer serializer)
        {
            base.Serialize(serializer);
            serializer.Write("Account", account_);
            serializer.Write("Password", password_);
            serializer.Write("Nick", nick_);
            serializer.Write("DeviceId", deviceId_);
            serializer.Write("Context", context_);
        }

        public override int GetLength()
        {
            int length = base.GetLength();
            var touched = new Capo<bool>(fingerprint, tag.Offset);
            if (touched[0])
            {
                length += Serializer.GetLength(account_);
            }
            if (touched[1])
            {
                length += Serializer.GetLength(password_);
            }
            if (touched[2])
            {
                length += Serializer.GetLength(nick_);
            }
            if (touched[3])
            {
                length += Serializer.GetLength(deviceId_);
            }
            if (touched[4])
            {
                length += Serializer.GetLength(context_);
            }
            return length;
        }

        protected override void Describe(StringBuilder stringBuilder)
        {
            base.Describe(stringBuilder);
            stringBuilder.AppendFormat(" Account=\"{0}\"", account_.Replace("\"", "\\\""));
            stringBuilder.AppendFormat(" Password=\"{0}\"", password_.Replace("\"", "\\\""));
            stringBuilder.AppendFormat(" Nick=\"{0}\"", nick_.Replace("\"", "\\\""));
            stringBuilder.AppendFormat(" DeviceId=\"{0}\"", deviceId_.Replace("\"", "\\\""));
            stringBuilder.AppendFormat(" Context={0}", context_);
        }

        private void Initialize()
        {
            account_ = "";
            password_ = "";
            nick_ = "";
            deviceId_ = "";
            context_ = 0;
        }
    }

    public class EventLoadUserReq : Event
    {
        new protected static readonly Tag tag;

        new public static int TypeId { get { return tag.TypeId; } }

        private string account_;
        private int context_;

        public string Account
        {
            get { return account_; }
            set
            {
                fingerprint.Touch(tag.Offset + 0);
                account_ = value;
            }
        }

        public int Context
        {
            get { return context_; }
            set
            {
                fingerprint.Touch(tag.Offset + 1);
                context_ = value;
            }
        }

        static EventLoadUserReq()
        {
            tag = new Tag(Event.tag, typeof(EventLoadUserReq), 2,
                    (int)EventDatabaseTypes.LoadUserReq);
        }

        public new static EventLoadUserReq New()
        {
            return new EventLoadUserReq();
        }

        public EventLoadUserReq()
            : base(tag.NumProps)
        {
            Initialize();
        }

        protected EventLoadUserReq(int length)
            : base(length + tag.NumProps)
        {
            Initialize();
        }

        protected override bool EqualsTo(Cell other)
        {
            if (!base.EqualsTo(other))
            {
                return false;
            }
            EventLoadUserReq o = (EventLoadUserReq)other;
            if (account_ != o.account_)
            {
                return false;
            }
            if (context_ != o.context_)
            {
                return false;
            }
            return true;
        }

        public override int GetHashCode(Fingerprint fingerprint)
        {
            var hash = new Hash(base.GetHashCode(fingerprint));
            if (fingerprint.Length <= tag.Offset)
            {
                return hash.Code;
            }
            var touched = new Capo<bool>(fingerprint, tag.Offset);
            if (touched[0])
            {
                hash.Update(tag.Offset + 0);
                hash.Update(account_);
            }
            if (touched[1])
            {
                hash.Update(tag.Offset + 1);
                hash.Update(context_);
            }
            return hash.Code;
        }

        public override int GetTypeId()
        {
            return tag.TypeId;
        }

        public override Cell.Tag GetTypeTag() 
        {
            return tag;
        }

        public override Func<Event> GetFactoryMethod()
        {
            return EventLoadUserReq.New;
        }

        protected override bool IsEquivalent(Cell other, Fingerprint fingerprint)
        {
            if (!base.IsEquivalent(other, fingerprint))
            {
                return false;
            }
            EventLoadUserReq o = (EventLoadUserReq)other;
            var touched = new Capo<bool>(fingerprint, tag.Offset);
            if (touched[0])
            {
                if (account_ != o.account_)
                {
                    return false;
                }
            }
            if (touched[1])
            {
                if (context_ != o.context_)
                {
                    return false;
                }
            }
            return true;
        }

        public override void Deserialize(Deserializer deserializer)
        {
            base.Deserialize(deserializer);
            var touched = new Capo<bool>(fingerprint, tag.Offset);
            if (touched[0])
            {
                deserializer.Read(out account_);
            }
            if (touched[1])
            {
                deserializer.Read(out context_);
            }
        }

        public override void Deserialize(VerboseDeserializer deserializer)
        {
            base.Deserialize(deserializer);
            deserializer.Read("Account", out account_);
            deserializer.Read("Context", out context_);
        }

        public override void Serialize(Serializer serializer)
        {
            base.Serialize(serializer);
            var touched = new Capo<bool>(fingerprint, tag.Offset);
            if (touched[0])
            {
                serializer.Write(account_);
            }
            if (touched[1])
            {
                serializer.Write(context_);
            }
        }

        public override void Serialize(VerboseSerializer serializer)
        {
            base.Serialize(serializer);
            serializer.Write("Account", account_);
            serializer.Write("Context", context_);
        }

        public override int GetLength()
        {
            int length = base.GetLength();
            var touched = new Capo<bool>(fingerprint, tag.Offset);
            if (touched[0])
            {
                length += Serializer.GetLength(account_);
            }
            if (touched[1])
            {
                length += Serializer.GetLength(context_);
            }
            return length;
        }

        protected override void Describe(StringBuilder stringBuilder)
        {
            base.Describe(stringBuilder);
            stringBuilder.AppendFormat(" Account=\"{0}\"", account_.Replace("\"", "\\\""));
            stringBuilder.AppendFormat(" Context={0}", context_);
        }

        private void Initialize()
        {
            account_ = "";
            context_ = 0;
        }
    }

    public class EventLoadUserResp : Event
    {
        new protected static readonly Tag tag;

        new public static int TypeId { get { return tag.TypeId; } }

        private string account_;
        private int context_;
        private int result_;
        private string nick_;
        private string password_;
        private string deviceId_;
        private int gold_;

        public string Account
        {
            get { return account_; }
            set
            {
                fingerprint.Touch(tag.Offset + 0);
                account_ = value;
            }
        }

        public int Context
        {
            get { return context_; }
            set
            {
                fingerprint.Touch(tag.Offset + 1);
                context_ = value;
            }
        }

        public int Result
        {
            get { return result_; }
            set
            {
                fingerprint.Touch(tag.Offset + 2);
                result_ = value;
            }
        }

        public string Nick
        {
            get { return nick_; }
            set
            {
                fingerprint.Touch(tag.Offset + 3);
                nick_ = value;
            }
        }

        public string Password
        {
            get { return password_; }
            set
            {
                fingerprint.Touch(tag.Offset + 4);
                password_ = value;
            }
        }

        public string DeviceId
        {
            get { return deviceId_; }
            set
            {
                fingerprint.Touch(tag.Offset + 5);
                deviceId_ = value;
            }
        }

        public int Gold
        {
            get { return gold_; }
            set
            {
                fingerprint.Touch(tag.Offset + 6);
                gold_ = value;
            }
        }

        static EventLoadUserResp()
        {
            tag = new Tag(Event.tag, typeof(EventLoadUserResp), 7,
                    (int)EventDatabaseTypes.LoadUserResp);
        }

        public new static EventLoadUserResp New()
        {
            return new EventLoadUserResp();
        }

        public EventLoadUserResp()
            : base(tag.NumProps)
        {
            Initialize();
        }

        protected EventLoadUserResp(int length)
            : base(length + tag.NumProps)
        {
            Initialize();
        }

        protected override bool EqualsTo(Cell other)
        {
            if (!base.EqualsTo(other))
            {
                return false;
            }
            EventLoadUserResp o = (EventLoadUserResp)other;
            if (account_ != o.account_)
            {
                return false;
            }
            if (context_ != o.context_)
            {
                return false;
            }
            if (result_ != o.result_)
            {
                return false;
            }
            if (nick_ != o.nick_)
            {
                return false;
            }
            if (password_ != o.password_)
            {
                return false;
            }
            if (deviceId_ != o.deviceId_)
            {
                return false;
            }
            if (gold_ != o.gold_)
            {
                return false;
            }
            return true;
        }

        public override int GetHashCode(Fingerprint fingerprint)
        {
            var hash = new Hash(base.GetHashCode(fingerprint));
            if (fingerprint.Length <= tag.Offset)
            {
                return hash.Code;
            }
            var touched = new Capo<bool>(fingerprint, tag.Offset);
            if (touched[0])
            {
                hash.Update(tag.Offset + 0);
                hash.Update(account_);
            }
            if (touched[1])
            {
                hash.Update(tag.Offset + 1);
                hash.Update(context_);
            }
            if (touched[2])
            {
                hash.Update(tag.Offset + 2);
                hash.Update(result_);
            }
            if (touched[3])
            {
                hash.Update(tag.Offset + 3);
                hash.Update(nick_);
            }
            if (touched[4])
            {
                hash.Update(tag.Offset + 4);
                hash.Update(password_);
            }
            if (touched[5])
            {
                hash.Update(tag.Offset + 5);
                hash.Update(deviceId_);
            }
            if (touched[6])
            {
                hash.Update(tag.Offset + 6);
                hash.Update(gold_);
            }
            return hash.Code;
        }

        public override int GetTypeId()
        {
            return tag.TypeId;
        }

        public override Cell.Tag GetTypeTag() 
        {
            return tag;
        }

        public override Func<Event> GetFactoryMethod()
        {
            return EventLoadUserResp.New;
        }

        protected override bool IsEquivalent(Cell other, Fingerprint fingerprint)
        {
            if (!base.IsEquivalent(other, fingerprint))
            {
                return false;
            }
            EventLoadUserResp o = (EventLoadUserResp)other;
            var touched = new Capo<bool>(fingerprint, tag.Offset);
            if (touched[0])
            {
                if (account_ != o.account_)
                {
                    return false;
                }
            }
            if (touched[1])
            {
                if (context_ != o.context_)
                {
                    return false;
                }
            }
            if (touched[2])
            {
                if (result_ != o.result_)
                {
                    return false;
                }
            }
            if (touched[3])
            {
                if (nick_ != o.nick_)
                {
                    return false;
                }
            }
            if (touched[4])
            {
                if (password_ != o.password_)
                {
                    return false;
                }
            }
            if (touched[5])
            {
                if (deviceId_ != o.deviceId_)
                {
                    return false;
                }
            }
            if (touched[6])
            {
                if (gold_ != o.gold_)
                {
                    return false;
                }
            }
            return true;
        }

        public override void Deserialize(Deserializer deserializer)
        {
            base.Deserialize(deserializer);
            var touched = new Capo<bool>(fingerprint, tag.Offset);
            if (touched[0])
            {
                deserializer.Read(out account_);
            }
            if (touched[1])
            {
                deserializer.Read(out context_);
            }
            if (touched[2])
            {
                deserializer.Read(out result_);
            }
            if (touched[3])
            {
                deserializer.Read(out nick_);
            }
            if (touched[4])
            {
                deserializer.Read(out password_);
            }
            if (touched[5])
            {
                deserializer.Read(out deviceId_);
            }
            if (touched[6])
            {
                deserializer.Read(out gold_);
            }
        }

        public override void Deserialize(VerboseDeserializer deserializer)
        {
            base.Deserialize(deserializer);
            deserializer.Read("Account", out account_);
            deserializer.Read("Context", out context_);
            deserializer.Read("Result", out result_);
            deserializer.Read("Nick", out nick_);
            deserializer.Read("Password", out password_);
            deserializer.Read("DeviceId", out deviceId_);
            deserializer.Read("Gold", out gold_);
        }

        public override void Serialize(Serializer serializer)
        {
            base.Serialize(serializer);
            var touched = new Capo<bool>(fingerprint, tag.Offset);
            if (touched[0])
            {
                serializer.Write(account_);
            }
            if (touched[1])
            {
                serializer.Write(context_);
            }
            if (touched[2])
            {
                serializer.Write(result_);
            }
            if (touched[3])
            {
                serializer.Write(nick_);
            }
            if (touched[4])
            {
                serializer.Write(password_);
            }
            if (touched[5])
            {
                serializer.Write(deviceId_);
            }
            if (touched[6])
            {
                serializer.Write(gold_);
            }
        }

        public override void Serialize(VerboseSerializer serializer)
        {
            base.Serialize(serializer);
            serializer.Write("Account", account_);
            serializer.Write("Context", context_);
            serializer.Write("Result", result_);
            serializer.Write("Nick", nick_);
            serializer.Write("Password", password_);
            serializer.Write("DeviceId", deviceId_);
            serializer.Write("Gold", gold_);
        }

        public override int GetLength()
        {
            int length = base.GetLength();
            var touched = new Capo<bool>(fingerprint, tag.Offset);
            if (touched[0])
            {
                length += Serializer.GetLength(account_);
            }
            if (touched[1])
            {
                length += Serializer.GetLength(context_);
            }
            if (touched[2])
            {
                length += Serializer.GetLength(result_);
            }
            if (touched[3])
            {
                length += Serializer.GetLength(nick_);
            }
            if (touched[4])
            {
                length += Serializer.GetLength(password_);
            }
            if (touched[5])
            {
                length += Serializer.GetLength(deviceId_);
            }
            if (touched[6])
            {
                length += Serializer.GetLength(gold_);
            }
            return length;
        }

        protected override void Describe(StringBuilder stringBuilder)
        {
            base.Describe(stringBuilder);
            stringBuilder.AppendFormat(" Account=\"{0}\"", account_.Replace("\"", "\\\""));
            stringBuilder.AppendFormat(" Context={0}", context_);
            stringBuilder.AppendFormat(" Result={0}", result_);
            stringBuilder.AppendFormat(" Nick=\"{0}\"", nick_.Replace("\"", "\\\""));
            stringBuilder.AppendFormat(" Password=\"{0}\"", password_.Replace("\"", "\\\""));
            stringBuilder.AppendFormat(" DeviceId=\"{0}\"", deviceId_.Replace("\"", "\\\""));
            stringBuilder.AppendFormat(" Gold={0}", gold_);
        }

        private void Initialize()
        {
            account_ = "";
            context_ = 0;
            result_ = 0;
            nick_ = "";
            password_ = "";
            deviceId_ = "";
            gold_ = 0;
        }
    }

    public class EventUpdateUserReq : Event
    {
        new protected static readonly Tag tag;

        new public static int TypeId { get { return tag.TypeId; } }

        private string account_;
        private int context_;
        private string nick_;
        private string password_;
        private string deviceId_;
        private int gold_;

        public string Account
        {
            get { return account_; }
            set
            {
                fingerprint.Touch(tag.Offset + 0);
                account_ = value;
            }
        }

        public int Context
        {
            get { return context_; }
            set
            {
                fingerprint.Touch(tag.Offset + 1);
                context_ = value;
            }
        }

        public string Nick
        {
            get { return nick_; }
            set
            {
                fingerprint.Touch(tag.Offset + 2);
                nick_ = value;
            }
        }

        public string Password
        {
            get { return password_; }
            set
            {
                fingerprint.Touch(tag.Offset + 3);
                password_ = value;
            }
        }

        public string DeviceId
        {
            get { return deviceId_; }
            set
            {
                fingerprint.Touch(tag.Offset + 4);
                deviceId_ = value;
            }
        }

        public int Gold
        {
            get { return gold_; }
            set
            {
                fingerprint.Touch(tag.Offset + 5);
                gold_ = value;
            }
        }

        static EventUpdateUserReq()
        {
            tag = new Tag(Event.tag, typeof(EventUpdateUserReq), 6,
                    (int)EventDatabaseTypes.UpdateUserReq);
        }

        public new static EventUpdateUserReq New()
        {
            return new EventUpdateUserReq();
        }

        public EventUpdateUserReq()
            : base(tag.NumProps)
        {
            Initialize();
        }

        protected EventUpdateUserReq(int length)
            : base(length + tag.NumProps)
        {
            Initialize();
        }

        protected override bool EqualsTo(Cell other)
        {
            if (!base.EqualsTo(other))
            {
                return false;
            }
            EventUpdateUserReq o = (EventUpdateUserReq)other;
            if (account_ != o.account_)
            {
                return false;
            }
            if (context_ != o.context_)
            {
                return false;
            }
            if (nick_ != o.nick_)
            {
                return false;
            }
            if (password_ != o.password_)
            {
                return false;
            }
            if (deviceId_ != o.deviceId_)
            {
                return false;
            }
            if (gold_ != o.gold_)
            {
                return false;
            }
            return true;
        }

        public override int GetHashCode(Fingerprint fingerprint)
        {
            var hash = new Hash(base.GetHashCode(fingerprint));
            if (fingerprint.Length <= tag.Offset)
            {
                return hash.Code;
            }
            var touched = new Capo<bool>(fingerprint, tag.Offset);
            if (touched[0])
            {
                hash.Update(tag.Offset + 0);
                hash.Update(account_);
            }
            if (touched[1])
            {
                hash.Update(tag.Offset + 1);
                hash.Update(context_);
            }
            if (touched[2])
            {
                hash.Update(tag.Offset + 2);
                hash.Update(nick_);
            }
            if (touched[3])
            {
                hash.Update(tag.Offset + 3);
                hash.Update(password_);
            }
            if (touched[4])
            {
                hash.Update(tag.Offset + 4);
                hash.Update(deviceId_);
            }
            if (touched[5])
            {
                hash.Update(tag.Offset + 5);
                hash.Update(gold_);
            }
            return hash.Code;
        }

        public override int GetTypeId()
        {
            return tag.TypeId;
        }

        public override Cell.Tag GetTypeTag() 
        {
            return tag;
        }

        public override Func<Event> GetFactoryMethod()
        {
            return EventUpdateUserReq.New;
        }

        protected override bool IsEquivalent(Cell other, Fingerprint fingerprint)
        {
            if (!base.IsEquivalent(other, fingerprint))
            {
                return false;
            }
            EventUpdateUserReq o = (EventUpdateUserReq)other;
            var touched = new Capo<bool>(fingerprint, tag.Offset);
            if (touched[0])
            {
                if (account_ != o.account_)
                {
                    return false;
                }
            }
            if (touched[1])
            {
                if (context_ != o.context_)
                {
                    return false;
                }
            }
            if (touched[2])
            {
                if (nick_ != o.nick_)
                {
                    return false;
                }
            }
            if (touched[3])
            {
                if (password_ != o.password_)
                {
                    return false;
                }
            }
            if (touched[4])
            {
                if (deviceId_ != o.deviceId_)
                {
                    return false;
                }
            }
            if (touched[5])
            {
                if (gold_ != o.gold_)
                {
                    return false;
                }
            }
            return true;
        }

        public override void Deserialize(Deserializer deserializer)
        {
            base.Deserialize(deserializer);
            var touched = new Capo<bool>(fingerprint, tag.Offset);
            if (touched[0])
            {
                deserializer.Read(out account_);
            }
            if (touched[1])
            {
                deserializer.Read(out context_);
            }
            if (touched[2])
            {
                deserializer.Read(out nick_);
            }
            if (touched[3])
            {
                deserializer.Read(out password_);
            }
            if (touched[4])
            {
                deserializer.Read(out deviceId_);
            }
            if (touched[5])
            {
                deserializer.Read(out gold_);
            }
        }

        public override void Deserialize(VerboseDeserializer deserializer)
        {
            base.Deserialize(deserializer);
            deserializer.Read("Account", out account_);
            deserializer.Read("Context", out context_);
            deserializer.Read("Nick", out nick_);
            deserializer.Read("Password", out password_);
            deserializer.Read("DeviceId", out deviceId_);
            deserializer.Read("Gold", out gold_);
        }

        public override void Serialize(Serializer serializer)
        {
            base.Serialize(serializer);
            var touched = new Capo<bool>(fingerprint, tag.Offset);
            if (touched[0])
            {
                serializer.Write(account_);
            }
            if (touched[1])
            {
                serializer.Write(context_);
            }
            if (touched[2])
            {
                serializer.Write(nick_);
            }
            if (touched[3])
            {
                serializer.Write(password_);
            }
            if (touched[4])
            {
                serializer.Write(deviceId_);
            }
            if (touched[5])
            {
                serializer.Write(gold_);
            }
        }

        public override void Serialize(VerboseSerializer serializer)
        {
            base.Serialize(serializer);
            serializer.Write("Account", account_);
            serializer.Write("Context", context_);
            serializer.Write("Nick", nick_);
            serializer.Write("Password", password_);
            serializer.Write("DeviceId", deviceId_);
            serializer.Write("Gold", gold_);
        }

        public override int GetLength()
        {
            int length = base.GetLength();
            var touched = new Capo<bool>(fingerprint, tag.Offset);
            if (touched[0])
            {
                length += Serializer.GetLength(account_);
            }
            if (touched[1])
            {
                length += Serializer.GetLength(context_);
            }
            if (touched[2])
            {
                length += Serializer.GetLength(nick_);
            }
            if (touched[3])
            {
                length += Serializer.GetLength(password_);
            }
            if (touched[4])
            {
                length += Serializer.GetLength(deviceId_);
            }
            if (touched[5])
            {
                length += Serializer.GetLength(gold_);
            }
            return length;
        }

        protected override void Describe(StringBuilder stringBuilder)
        {
            base.Describe(stringBuilder);
            stringBuilder.AppendFormat(" Account=\"{0}\"", account_.Replace("\"", "\\\""));
            stringBuilder.AppendFormat(" Context={0}", context_);
            stringBuilder.AppendFormat(" Nick=\"{0}\"", nick_.Replace("\"", "\\\""));
            stringBuilder.AppendFormat(" Password=\"{0}\"", password_.Replace("\"", "\\\""));
            stringBuilder.AppendFormat(" DeviceId=\"{0}\"", deviceId_.Replace("\"", "\\\""));
            stringBuilder.AppendFormat(" Gold={0}", gold_);
        }

        private void Initialize()
        {
            account_ = "";
            context_ = 0;
            nick_ = "";
            password_ = "";
            deviceId_ = "";
            gold_ = 0;
        }
    }

    public class EventUpdateUserResp : Event
    {
        new protected static readonly Tag tag;

        new public static int TypeId { get { return tag.TypeId; } }

        private string account_;
        private int context_;
        private int result_;
        private string nick_;
        private string password_;
        private string deviceId_;
        private int gold_;

        public string Account
        {
            get { return account_; }
            set
            {
                fingerprint.Touch(tag.Offset + 0);
                account_ = value;
            }
        }

        public int Context
        {
            get { return context_; }
            set
            {
                fingerprint.Touch(tag.Offset + 1);
                context_ = value;
            }
        }

        public int Result
        {
            get { return result_; }
            set
            {
                fingerprint.Touch(tag.Offset + 2);
                result_ = value;
            }
        }

        public string Nick
        {
            get { return nick_; }
            set
            {
                fingerprint.Touch(tag.Offset + 3);
                nick_ = value;
            }
        }

        public string Password
        {
            get { return password_; }
            set
            {
                fingerprint.Touch(tag.Offset + 4);
                password_ = value;
            }
        }

        public string DeviceId
        {
            get { return deviceId_; }
            set
            {
                fingerprint.Touch(tag.Offset + 5);
                deviceId_ = value;
            }
        }

        public int Gold
        {
            get { return gold_; }
            set
            {
                fingerprint.Touch(tag.Offset + 6);
                gold_ = value;
            }
        }

        static EventUpdateUserResp()
        {
            tag = new Tag(Event.tag, typeof(EventUpdateUserResp), 7,
                    (int)EventDatabaseTypes.UpdateUserResp);
        }

        public new static EventUpdateUserResp New()
        {
            return new EventUpdateUserResp();
        }

        public EventUpdateUserResp()
            : base(tag.NumProps)
        {
            Initialize();
        }

        protected EventUpdateUserResp(int length)
            : base(length + tag.NumProps)
        {
            Initialize();
        }

        protected override bool EqualsTo(Cell other)
        {
            if (!base.EqualsTo(other))
            {
                return false;
            }
            EventUpdateUserResp o = (EventUpdateUserResp)other;
            if (account_ != o.account_)
            {
                return false;
            }
            if (context_ != o.context_)
            {
                return false;
            }
            if (result_ != o.result_)
            {
                return false;
            }
            if (nick_ != o.nick_)
            {
                return false;
            }
            if (password_ != o.password_)
            {
                return false;
            }
            if (deviceId_ != o.deviceId_)
            {
                return false;
            }
            if (gold_ != o.gold_)
            {
                return false;
            }
            return true;
        }

        public override int GetHashCode(Fingerprint fingerprint)
        {
            var hash = new Hash(base.GetHashCode(fingerprint));
            if (fingerprint.Length <= tag.Offset)
            {
                return hash.Code;
            }
            var touched = new Capo<bool>(fingerprint, tag.Offset);
            if (touched[0])
            {
                hash.Update(tag.Offset + 0);
                hash.Update(account_);
            }
            if (touched[1])
            {
                hash.Update(tag.Offset + 1);
                hash.Update(context_);
            }
            if (touched[2])
            {
                hash.Update(tag.Offset + 2);
                hash.Update(result_);
            }
            if (touched[3])
            {
                hash.Update(tag.Offset + 3);
                hash.Update(nick_);
            }
            if (touched[4])
            {
                hash.Update(tag.Offset + 4);
                hash.Update(password_);
            }
            if (touched[5])
            {
                hash.Update(tag.Offset + 5);
                hash.Update(deviceId_);
            }
            if (touched[6])
            {
                hash.Update(tag.Offset + 6);
                hash.Update(gold_);
            }
            return hash.Code;
        }

        public override int GetTypeId()
        {
            return tag.TypeId;
        }

        public override Cell.Tag GetTypeTag() 
        {
            return tag;
        }

        public override Func<Event> GetFactoryMethod()
        {
            return EventUpdateUserResp.New;
        }

        protected override bool IsEquivalent(Cell other, Fingerprint fingerprint)
        {
            if (!base.IsEquivalent(other, fingerprint))
            {
                return false;
            }
            EventUpdateUserResp o = (EventUpdateUserResp)other;
            var touched = new Capo<bool>(fingerprint, tag.Offset);
            if (touched[0])
            {
                if (account_ != o.account_)
                {
                    return false;
                }
            }
            if (touched[1])
            {
                if (context_ != o.context_)
                {
                    return false;
                }
            }
            if (touched[2])
            {
                if (result_ != o.result_)
                {
                    return false;
                }
            }
            if (touched[3])
            {
                if (nick_ != o.nick_)
                {
                    return false;
                }
            }
            if (touched[4])
            {
                if (password_ != o.password_)
                {
                    return false;
                }
            }
            if (touched[5])
            {
                if (deviceId_ != o.deviceId_)
                {
                    return false;
                }
            }
            if (touched[6])
            {
                if (gold_ != o.gold_)
                {
                    return false;
                }
            }
            return true;
        }

        public override void Deserialize(Deserializer deserializer)
        {
            base.Deserialize(deserializer);
            var touched = new Capo<bool>(fingerprint, tag.Offset);
            if (touched[0])
            {
                deserializer.Read(out account_);
            }
            if (touched[1])
            {
                deserializer.Read(out context_);
            }
            if (touched[2])
            {
                deserializer.Read(out result_);
            }
            if (touched[3])
            {
                deserializer.Read(out nick_);
            }
            if (touched[4])
            {
                deserializer.Read(out password_);
            }
            if (touched[5])
            {
                deserializer.Read(out deviceId_);
            }
            if (touched[6])
            {
                deserializer.Read(out gold_);
            }
        }

        public override void Deserialize(VerboseDeserializer deserializer)
        {
            base.Deserialize(deserializer);
            deserializer.Read("Account", out account_);
            deserializer.Read("Context", out context_);
            deserializer.Read("Result", out result_);
            deserializer.Read("Nick", out nick_);
            deserializer.Read("Password", out password_);
            deserializer.Read("DeviceId", out deviceId_);
            deserializer.Read("Gold", out gold_);
        }

        public override void Serialize(Serializer serializer)
        {
            base.Serialize(serializer);
            var touched = new Capo<bool>(fingerprint, tag.Offset);
            if (touched[0])
            {
                serializer.Write(account_);
            }
            if (touched[1])
            {
                serializer.Write(context_);
            }
            if (touched[2])
            {
                serializer.Write(result_);
            }
            if (touched[3])
            {
                serializer.Write(nick_);
            }
            if (touched[4])
            {
                serializer.Write(password_);
            }
            if (touched[5])
            {
                serializer.Write(deviceId_);
            }
            if (touched[6])
            {
                serializer.Write(gold_);
            }
        }

        public override void Serialize(VerboseSerializer serializer)
        {
            base.Serialize(serializer);
            serializer.Write("Account", account_);
            serializer.Write("Context", context_);
            serializer.Write("Result", result_);
            serializer.Write("Nick", nick_);
            serializer.Write("Password", password_);
            serializer.Write("DeviceId", deviceId_);
            serializer.Write("Gold", gold_);
        }

        public override int GetLength()
        {
            int length = base.GetLength();
            var touched = new Capo<bool>(fingerprint, tag.Offset);
            if (touched[0])
            {
                length += Serializer.GetLength(account_);
            }
            if (touched[1])
            {
                length += Serializer.GetLength(context_);
            }
            if (touched[2])
            {
                length += Serializer.GetLength(result_);
            }
            if (touched[3])
            {
                length += Serializer.GetLength(nick_);
            }
            if (touched[4])
            {
                length += Serializer.GetLength(password_);
            }
            if (touched[5])
            {
                length += Serializer.GetLength(deviceId_);
            }
            if (touched[6])
            {
                length += Serializer.GetLength(gold_);
            }
            return length;
        }

        protected override void Describe(StringBuilder stringBuilder)
        {
            base.Describe(stringBuilder);
            stringBuilder.AppendFormat(" Account=\"{0}\"", account_.Replace("\"", "\\\""));
            stringBuilder.AppendFormat(" Context={0}", context_);
            stringBuilder.AppendFormat(" Result={0}", result_);
            stringBuilder.AppendFormat(" Nick=\"{0}\"", nick_.Replace("\"", "\\\""));
            stringBuilder.AppendFormat(" Password=\"{0}\"", password_.Replace("\"", "\\\""));
            stringBuilder.AppendFormat(" DeviceId=\"{0}\"", deviceId_.Replace("\"", "\\\""));
            stringBuilder.AppendFormat(" Gold={0}", gold_);
        }

        private void Initialize()
        {
            account_ = "";
            context_ = 0;
            result_ = 0;
            nick_ = "";
            password_ = "";
            deviceId_ = "";
            gold_ = 0;
        }
    }
}
