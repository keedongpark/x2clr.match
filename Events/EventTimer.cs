// auto-generated by x2clr xpiler

using System;
using System.Collections.Generic;
using System.Text;

using x2;

namespace Events.Timer
{
    public class EventTimerBase : Event
    {
        new protected static readonly Tag tag;

        new public static int TypeId { get { return tag.TypeId; } }

        private int context_;

        public int Context
        {
            get { return context_; }
            set
            {
                fingerprint.Touch(tag.Offset + 0);
                context_ = value;
            }
        }

        static EventTimerBase()
        {
            tag = new Tag(Event.tag, typeof(EventTimerBase), 1,
                    (int)EventTimerTypes.Timer);
        }

        public new static EventTimerBase New()
        {
            return new EventTimerBase();
        }

        public EventTimerBase()
            : base(tag.NumProps)
        {
            Initialize();
        }

        protected EventTimerBase(int length)
            : base(length + tag.NumProps)
        {
            Initialize();
        }

        protected override bool EqualsTo(Cell other)
        {
            if (!base.EqualsTo(other))
            {
                return false;
            }
            EventTimerBase o = (EventTimerBase)other;
            if (context_ != o.context_)
            {
                return false;
            }
            return true;
        }

        public override int GetHashCode(Fingerprint fingerprint)
        {
            var hash = new Hash(base.GetHashCode(fingerprint));
            if (fingerprint.Length <= tag.Offset)
            {
                return hash.Code;
            }
            var touched = new Capo<bool>(fingerprint, tag.Offset);
            if (touched[0])
            {
                hash.Update(tag.Offset + 0);
                hash.Update(context_);
            }
            return hash.Code;
        }

        public override int GetTypeId()
        {
            return tag.TypeId;
        }

        public override Cell.Tag GetTypeTag() 
        {
            return tag;
        }

        public override Func<Event> GetFactoryMethod()
        {
            return EventTimerBase.New;
        }

        protected override bool IsEquivalent(Cell other, Fingerprint fingerprint)
        {
            if (!base.IsEquivalent(other, fingerprint))
            {
                return false;
            }
            EventTimerBase o = (EventTimerBase)other;
            var touched = new Capo<bool>(fingerprint, tag.Offset);
            if (touched[0])
            {
                if (context_ != o.context_)
                {
                    return false;
                }
            }
            return true;
        }

        public override void Deserialize(Deserializer deserializer)
        {
            base.Deserialize(deserializer);
            var touched = new Capo<bool>(fingerprint, tag.Offset);
            if (touched[0])
            {
                deserializer.Read(out context_);
            }
        }

        public override void Deserialize(VerboseDeserializer deserializer)
        {
            base.Deserialize(deserializer);
            deserializer.Read("Context", out context_);
        }

        public override void Serialize(Serializer serializer)
        {
            base.Serialize(serializer);
            var touched = new Capo<bool>(fingerprint, tag.Offset);
            if (touched[0])
            {
                serializer.Write(context_);
            }
        }

        public override void Serialize(VerboseSerializer serializer)
        {
            base.Serialize(serializer);
            serializer.Write("Context", context_);
        }

        public override int GetLength()
        {
            int length = base.GetLength();
            var touched = new Capo<bool>(fingerprint, tag.Offset);
            if (touched[0])
            {
                length += Serializer.GetLength(context_);
            }
            return length;
        }

        protected override void Describe(StringBuilder stringBuilder)
        {
            base.Describe(stringBuilder);
            stringBuilder.AppendFormat(" Context={0}", context_);
        }

        private void Initialize()
        {
            context_ = 0;
        }
    }

    public class TimerMatch : EventTimerBase
    {
        new protected static readonly Tag tag;

        new public static int TypeId { get { return tag.TypeId; } }

        static TimerMatch()
        {
            tag = new Tag(EventTimerBase.tag, typeof(TimerMatch), 0,
                    (int)EventTimerTypes.TimerMatch);
        }

        public new static TimerMatch New()
        {
            return new TimerMatch();
        }

        public TimerMatch()
            : base(tag.NumProps)
        {
            Initialize();
        }

        protected TimerMatch(int length)
            : base(length + tag.NumProps)
        {
            Initialize();
        }

        protected override bool EqualsTo(Cell other)
        {
            if (!base.EqualsTo(other))
            {
                return false;
            }
            return true;
        }

        public override int GetHashCode(Fingerprint fingerprint)
        {
            var hash = new Hash(base.GetHashCode(fingerprint));
            return hash.Code;
        }

        public override int GetTypeId()
        {
            return tag.TypeId;
        }

        public override Cell.Tag GetTypeTag() 
        {
            return tag;
        }

        public override Func<Event> GetFactoryMethod()
        {
            return TimerMatch.New;
        }

        protected override bool IsEquivalent(Cell other, Fingerprint fingerprint)
        {
            if (!base.IsEquivalent(other, fingerprint))
            {
                return false;
            }
            return true;
        }

        public override void Deserialize(Deserializer deserializer)
        {
            base.Deserialize(deserializer);
        }

        public override void Deserialize(VerboseDeserializer deserializer)
        {
            base.Deserialize(deserializer);
        }

        public override void Serialize(Serializer serializer)
        {
            base.Serialize(serializer);
        }

        public override void Serialize(VerboseSerializer serializer)
        {
            base.Serialize(serializer);
        }

        public override int GetLength()
        {
            int length = base.GetLength();
            return length;
        }

        protected override void Describe(StringBuilder stringBuilder)
        {
            base.Describe(stringBuilder);
        }

        private void Initialize()
        {
        }
    }

    public class TimerCoordinator : EventTimerBase
    {
        new protected static readonly Tag tag;

        new public static int TypeId { get { return tag.TypeId; } }

        static TimerCoordinator()
        {
            tag = new Tag(EventTimerBase.tag, typeof(TimerCoordinator), 0,
                    (int)EventTimerTypes.TimerCoordinator);
        }

        public new static TimerCoordinator New()
        {
            return new TimerCoordinator();
        }

        public TimerCoordinator()
            : base(tag.NumProps)
        {
            Initialize();
        }

        protected TimerCoordinator(int length)
            : base(length + tag.NumProps)
        {
            Initialize();
        }

        protected override bool EqualsTo(Cell other)
        {
            if (!base.EqualsTo(other))
            {
                return false;
            }
            return true;
        }

        public override int GetHashCode(Fingerprint fingerprint)
        {
            var hash = new Hash(base.GetHashCode(fingerprint));
            return hash.Code;
        }

        public override int GetTypeId()
        {
            return tag.TypeId;
        }

        public override Cell.Tag GetTypeTag() 
        {
            return tag;
        }

        public override Func<Event> GetFactoryMethod()
        {
            return TimerCoordinator.New;
        }

        protected override bool IsEquivalent(Cell other, Fingerprint fingerprint)
        {
            if (!base.IsEquivalent(other, fingerprint))
            {
                return false;
            }
            return true;
        }

        public override void Deserialize(Deserializer deserializer)
        {
            base.Deserialize(deserializer);
        }

        public override void Deserialize(VerboseDeserializer deserializer)
        {
            base.Deserialize(deserializer);
        }

        public override void Serialize(Serializer serializer)
        {
            base.Serialize(serializer);
        }

        public override void Serialize(VerboseSerializer serializer)
        {
            base.Serialize(serializer);
        }

        public override int GetLength()
        {
            int length = base.GetLength();
            return length;
        }

        protected override void Describe(StringBuilder stringBuilder)
        {
            base.Describe(stringBuilder);
        }

        private void Initialize()
        {
        }
    }
}
